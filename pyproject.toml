[build-system]
build-backend = "setuptools.build_meta"
requires = ["setuptools", "wheel", "versioningit"]

[project]
name = "pipefunc"
description = "A Python library for defining, managing, and executing function pipelines."
requires-python = ">=3.10"
dynamic = ["version"]
maintainers = [{ name = "Bas Nijholt", email = "bas@nijho.lt" }]
license = { text = "MIT" }
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: System :: Distributed Computing",
]
dependencies = ["networkx", "cloudpickle", "numpy"]
[project.optional-dependencies]
adaptive = ["adaptive", "adaptive-scheduler>=2.13.3"]
xarray = ["xarray"]
widgets = ["ipywidgets"]
zarr = ["zarr"]
pandas = ["pandas"]
profiling = ["psutil"]
pydantic = ["pydantic"]
plotting = ["matplotlib", "pygraphviz", "holoviews", "bokeh", "graphviz"]
test = [
    "pytest",
    "pytest-asyncio",
    "pytest-codspeed",
    "pytest-cov",
    "pytest-xdist",
    "coverage",
    "versioningit",
]
docs = [
    "sphinx",
    "sphinx-autodoc-typehints",
    "sphinx-book-theme",
    "sphinx-copybutton",
    "sphinx-notfound-page",
    "sphinx-togglebutton",
    "emoji",
    "jupytext",
    "myst-nb",
    "myst-parser",
    "versioningit",
    # Used for the example notebook
    "seaborn",
    "nltk",
    "scikit-image",
]
# all doesn't include 'pydantic' because there are no specific features that depend on it
all = ["pipefunc[adaptive,xarray,zarr,plotting,profiling,widgets]"]
dev = [ # all + dev deps
    "black[jupyter]",
    "pre-commit",
    "ruff",
    "mypy",
    "versioningit",
    "pipefunc[all,test,docs,pydantic]",
]
[project.urls]
homepage = "https://pipefunc.readthedocs.io/"
documentation = "https://pipefunc.readthedocs.io/"
repository = "https://github.com/pipefunc/pipefunc"

[project.readme]
content-type = "text/markdown"
file = "README.md"

[tool.versioningit]
default-version = "0.0.0"

[tool.versioningit.vcs]
method = "git"
match = ["v*"]
default-tag = "0.0.0"

[tool.setuptools.package-data]
"pipefunc" = ["py.typed"]

[tool.setuptools.packages.find]
include = ["pipefunc.*", "pipefunc"]

[tool.setuptools.cmdclass]
sdist = "versioningit.cmdclass.sdist"
build_py = "versioningit.cmdclass.build_py"

[tool.versioningit.format]
dirty = "{version}.dev{distance}+{branch}.{vcs}{rev}.dirty"
distance = "{version}.dev{distance}+{branch}.{vcs}{rev}"
distance-dirty = "{version}.dev{distance}+{branch}.{vcs}{rev}.dirty"

[tool.versioningit.onbuild]
build-file = "pipefunc/_version.py"
source-file = "pipefunc/_version.py"

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "module"
addopts = """
    -vvv
    --cov=pipefunc
    --cov-report term
    --cov-report html
    --cov-report xml
    --cov-fail-under=35
    --asyncio-mode=strict
"""

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
    "if __name__ == .__main__.:",
]

[tool.coverage.run]
omit = [
    "pipefunc/map/_types.py",  # Only imported in `if TYPE_CHECKING` block
]

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "T20",     # flake8-print
    "ANN101",  # Missing type annotation for {name} in method
    "S101",    # Use of assert detected
    "PD901",   # df is a bad variable name. Be kinder to your future self.
    "ANN401",  # Dynamically typed expressions (typing.Any) are disallowed in {name}
    "D402",    # First line should not be the function's signature
    "PLW0603", # Using the global statement to update `X` is discouraged
    "D401",    # First line of docstring should be in imperative mood
    "SLF001",  # Private member accessed
    "S603",    # `subprocess` call: check for execution of untrusted input
    "S607",    # Starting a process with a partial executable path
    "PLR0913", # Too many arguments to function call (N > 5)
    "TD002",   # Missing author in TODO; try: `# TODO(<author_name>): ...`
    "TD003",   # Missing issue link on the line following this TODO
    "FIX002",  # Line contains TODO"
    "E501",    # Line too long
    "D107",    # Missing docstring in `__init__`
    "B905",    # `zip()` without an explicit `strict=` parameter
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["SLF001", "ANN", "D", "PLR2004", "ARG001"]
"tests/test_examples.py" = ["E501"]
".github/*" = ["INP001"]
"example.ipynb" = [
    "D101",
    "D103",
    "DTZ005",
    "PLR2004",
    "ARG001",
    "ANN001",
    "ANN201",
    "NPY002",
    "RET504",
]

[tool.ruff.lint.mccabe]
max-complexity = 18

[tool.mypy]
python_version = "3.10"
